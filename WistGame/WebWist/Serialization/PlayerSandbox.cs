// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Serialization
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct PlayerSandbox : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlayerSandbox GetRootAsPlayerSandbox(ByteBuffer _bb) { return GetRootAsPlayerSandbox(_bb, new PlayerSandbox()); }
  public static PlayerSandbox GetRootAsPlayerSandbox(ByteBuffer _bb, PlayerSandbox obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerSandbox __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlayerIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NumberOfPlayers { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxHandSize { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CurrentTurn { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Serialization.State CurrentState { get { int o = __p.__offset(12); return o != 0 ? (Serialization.State)__p.bb.GetSbyte(o + __p.bb_pos) : Serialization.State.Initialize; } }
  public int CurrentPlayer { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Serialization.Card? TrumpCard { get { int o = __p.__offset(16); return o != 0 ? (Serialization.Card?)(new Serialization.Card()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int FirstFoldPlayer { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PlacedBets(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PlacedBetsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPlacedBetsBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetPlacedBetsBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetPlacedBetsArray() { return __p.__vector_as_array<int>(20); }
  public int PlayedCards(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PlayedCardsLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPlayedCardsBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetPlayedCardsBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetPlayedCardsArray() { return __p.__vector_as_array<int>(22); }
  public int NumberOfCardPerPlayers(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NumberOfCardPerPlayersLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetNumberOfCardPerPlayersBytes() { return __p.__vector_as_span<int>(24, 4); }
#else
  public ArraySegment<byte>? GetNumberOfCardPerPlayersBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public int[] GetNumberOfCardPerPlayersArray() { return __p.__vector_as_array<int>(24); }
  public Serialization.Card? PlayerHand(int j) { int o = __p.__offset(26); return o != 0 ? (Serialization.Card?)(new Serialization.Card()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PlayerHandLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Serialization.PlayerSandbox> CreatePlayerSandbox(FlatBufferBuilder builder,
      int PlayerIndex = 0,
      int NumberOfPlayers = 0,
      int MaxHandSize = 0,
      int CurrentTurn = 0,
      Serialization.State CurrentState = Serialization.State.Initialize,
      int CurrentPlayer = 0,
      Offset<Serialization.Card> TrumpCardOffset = default(Offset<Serialization.Card>),
      int FirstFoldPlayer = 0,
      VectorOffset PlacedBetsOffset = default(VectorOffset),
      VectorOffset PlayedCardsOffset = default(VectorOffset),
      VectorOffset NumberOfCardPerPlayersOffset = default(VectorOffset),
      VectorOffset PlayerHandOffset = default(VectorOffset)) {
    builder.StartTable(12);
    PlayerSandbox.AddPlayerHand(builder, PlayerHandOffset);
    PlayerSandbox.AddNumberOfCardPerPlayers(builder, NumberOfCardPerPlayersOffset);
    PlayerSandbox.AddPlayedCards(builder, PlayedCardsOffset);
    PlayerSandbox.AddPlacedBets(builder, PlacedBetsOffset);
    PlayerSandbox.AddFirstFoldPlayer(builder, FirstFoldPlayer);
    PlayerSandbox.AddTrumpCard(builder, TrumpCardOffset);
    PlayerSandbox.AddCurrentPlayer(builder, CurrentPlayer);
    PlayerSandbox.AddCurrentTurn(builder, CurrentTurn);
    PlayerSandbox.AddMaxHandSize(builder, MaxHandSize);
    PlayerSandbox.AddNumberOfPlayers(builder, NumberOfPlayers);
    PlayerSandbox.AddPlayerIndex(builder, PlayerIndex);
    PlayerSandbox.AddCurrentState(builder, CurrentState);
    return PlayerSandbox.EndPlayerSandbox(builder);
  }

  public static void StartPlayerSandbox(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddPlayerIndex(FlatBufferBuilder builder, int PlayerIndex) { builder.AddInt(0, PlayerIndex, 0); }
  public static void AddNumberOfPlayers(FlatBufferBuilder builder, int NumberOfPlayers) { builder.AddInt(1, NumberOfPlayers, 0); }
  public static void AddMaxHandSize(FlatBufferBuilder builder, int MaxHandSize) { builder.AddInt(2, MaxHandSize, 0); }
  public static void AddCurrentTurn(FlatBufferBuilder builder, int CurrentTurn) { builder.AddInt(3, CurrentTurn, 0); }
  public static void AddCurrentState(FlatBufferBuilder builder, Serialization.State CurrentState) { builder.AddSbyte(4, (sbyte)CurrentState, 0); }
  public static void AddCurrentPlayer(FlatBufferBuilder builder, int CurrentPlayer) { builder.AddInt(5, CurrentPlayer, 0); }
  public static void AddTrumpCard(FlatBufferBuilder builder, Offset<Serialization.Card> TrumpCardOffset) { builder.AddOffset(6, TrumpCardOffset.Value, 0); }
  public static void AddFirstFoldPlayer(FlatBufferBuilder builder, int FirstFoldPlayer) { builder.AddInt(7, FirstFoldPlayer, 0); }
  public static void AddPlacedBets(FlatBufferBuilder builder, VectorOffset PlacedBetsOffset) { builder.AddOffset(8, PlacedBetsOffset.Value, 0); }
  public static VectorOffset CreatePlacedBetsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePlacedBetsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPlacedBetsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPlayedCards(FlatBufferBuilder builder, VectorOffset PlayedCardsOffset) { builder.AddOffset(9, PlayedCardsOffset.Value, 0); }
  public static VectorOffset CreatePlayedCardsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePlayedCardsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPlayedCardsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNumberOfCardPerPlayers(FlatBufferBuilder builder, VectorOffset NumberOfCardPerPlayersOffset) { builder.AddOffset(10, NumberOfCardPerPlayersOffset.Value, 0); }
  public static VectorOffset CreateNumberOfCardPerPlayersVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNumberOfCardPerPlayersVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNumberOfCardPerPlayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPlayerHand(FlatBufferBuilder builder, VectorOffset PlayerHandOffset) { builder.AddOffset(11, PlayerHandOffset.Value, 0); }
  public static VectorOffset CreatePlayerHandVector(FlatBufferBuilder builder, Offset<Serialization.Card>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePlayerHandVectorBlock(FlatBufferBuilder builder, Offset<Serialization.Card>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPlayerHandVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Serialization.PlayerSandbox> EndPlayerSandbox(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Serialization.PlayerSandbox>(o);
  }
  public static void FinishPlayerSandboxBuffer(FlatBufferBuilder builder, Offset<Serialization.PlayerSandbox> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPlayerSandboxBuffer(FlatBufferBuilder builder, Offset<Serialization.PlayerSandbox> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
