// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace WebWistSerialization
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct PlayerSandbox : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlayerSandbox GetRootAsPlayerSandbox(ByteBuffer _bb) { return GetRootAsPlayerSandbox(_bb, new PlayerSandbox()); }
  public static PlayerSandbox GetRootAsPlayerSandbox(ByteBuffer _bb, PlayerSandbox obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerSandbox __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short PlayerIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }

  public static Offset<WebWistSerialization.PlayerSandbox> CreatePlayerSandbox(FlatBufferBuilder builder,
      short PlayerIndex = 0) {
    builder.StartTable(1);
    PlayerSandbox.AddPlayerIndex(builder, PlayerIndex);
    return PlayerSandbox.EndPlayerSandbox(builder);
  }

  public static void StartPlayerSandbox(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayerIndex(FlatBufferBuilder builder, short PlayerIndex) { builder.AddShort(0, PlayerIndex, 0); }
  public static Offset<WebWistSerialization.PlayerSandbox> EndPlayerSandbox(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WebWistSerialization.PlayerSandbox>(o);
  }
  public static void FinishPlayerSandboxBuffer(FlatBufferBuilder builder, Offset<WebWistSerialization.PlayerSandbox> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPlayerSandboxBuffer(FlatBufferBuilder builder, Offset<WebWistSerialization.PlayerSandbox> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
