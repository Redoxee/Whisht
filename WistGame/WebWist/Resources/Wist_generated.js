// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var Serialization = Serialization || {};

/**
 * @constructor
 */
Serialization.PlayerSandbox = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Serialization.PlayerSandbox}
 */
Serialization.PlayerSandbox.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Serialization.PlayerSandbox=} obj
 * @returns {Serialization.PlayerSandbox}
 */
Serialization.PlayerSandbox.getRootAsPlayerSandbox = function(bb, obj) {
  return (obj || new Serialization.PlayerSandbox).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Serialization.PlayerSandbox=} obj
 * @returns {Serialization.PlayerSandbox}
 */
Serialization.PlayerSandbox.getSizePrefixedRootAsPlayerSandbox = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Serialization.PlayerSandbox).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
Serialization.PlayerSandbox.prototype.PlayerIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
Serialization.PlayerSandbox.prototype.NumberOfPlayers = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
Serialization.PlayerSandbox.prototype.MaxHandSize = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
Serialization.PlayerSandbox.prototype.CurrentTurn = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {Serialization.State}
 */
Serialization.PlayerSandbox.prototype.CurrentState = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? /** @type {Serialization.State} */ (this.bb.readInt8(this.bb_pos + offset)) : Serialization.State.Initialize;
};

/**
 * @returns {number}
 */
Serialization.PlayerSandbox.prototype.CurrentPlayer = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {Serialization.Card=} obj
 * @returns {Serialization.Card|null}
 */
Serialization.PlayerSandbox.prototype.TrumpCard = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? (obj || new Serialization.Card).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @returns {number}
 */
Serialization.PlayerSandbox.prototype.FirstFoldPlayer = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @returns {number}
 */
Serialization.PlayerSandbox.prototype.PlacedBets = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
Serialization.PlayerSandbox.prototype.PlacedBetsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
Serialization.PlayerSandbox.prototype.PlacedBetsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
Serialization.PlayerSandbox.prototype.PlayedCards = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
Serialization.PlayerSandbox.prototype.PlayedCardsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
Serialization.PlayerSandbox.prototype.PlayedCardsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
Serialization.PlayerSandbox.prototype.NumberOfCardPerPlayers = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
Serialization.PlayerSandbox.prototype.NumberOfCardPerPlayersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
Serialization.PlayerSandbox.prototype.NumberOfCardPerPlayersArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @param {Serialization.Card=} obj
 * @returns {Serialization.Card}
 */
Serialization.PlayerSandbox.prototype.PlayerHand = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? (obj || new Serialization.Card).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
Serialization.PlayerSandbox.prototype.PlayerHandLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Serialization.PlayerSandbox.startPlayerSandbox = function(builder) {
  builder.startObject(12);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} PlayerIndex
 */
Serialization.PlayerSandbox.addPlayerIndex = function(builder, PlayerIndex) {
  builder.addFieldInt32(0, PlayerIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} NumberOfPlayers
 */
Serialization.PlayerSandbox.addNumberOfPlayers = function(builder, NumberOfPlayers) {
  builder.addFieldInt32(1, NumberOfPlayers, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} MaxHandSize
 */
Serialization.PlayerSandbox.addMaxHandSize = function(builder, MaxHandSize) {
  builder.addFieldInt32(2, MaxHandSize, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} CurrentTurn
 */
Serialization.PlayerSandbox.addCurrentTurn = function(builder, CurrentTurn) {
  builder.addFieldInt32(3, CurrentTurn, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Serialization.State} CurrentState
 */
Serialization.PlayerSandbox.addCurrentState = function(builder, CurrentState) {
  builder.addFieldInt8(4, CurrentState, Serialization.State.Initialize);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} CurrentPlayer
 */
Serialization.PlayerSandbox.addCurrentPlayer = function(builder, CurrentPlayer) {
  builder.addFieldInt32(5, CurrentPlayer, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} TrumpCardOffset
 */
Serialization.PlayerSandbox.addTrumpCard = function(builder, TrumpCardOffset) {
  builder.addFieldOffset(6, TrumpCardOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} FirstFoldPlayer
 */
Serialization.PlayerSandbox.addFirstFoldPlayer = function(builder, FirstFoldPlayer) {
  builder.addFieldInt32(7, FirstFoldPlayer, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} PlacedBetsOffset
 */
Serialization.PlayerSandbox.addPlacedBets = function(builder, PlacedBetsOffset) {
  builder.addFieldOffset(8, PlacedBetsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
Serialization.PlayerSandbox.createPlacedBetsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Serialization.PlayerSandbox.startPlacedBetsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} PlayedCardsOffset
 */
Serialization.PlayerSandbox.addPlayedCards = function(builder, PlayedCardsOffset) {
  builder.addFieldOffset(9, PlayedCardsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
Serialization.PlayerSandbox.createPlayedCardsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Serialization.PlayerSandbox.startPlayedCardsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} NumberOfCardPerPlayersOffset
 */
Serialization.PlayerSandbox.addNumberOfCardPerPlayers = function(builder, NumberOfCardPerPlayersOffset) {
  builder.addFieldOffset(10, NumberOfCardPerPlayersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
Serialization.PlayerSandbox.createNumberOfCardPerPlayersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Serialization.PlayerSandbox.startNumberOfCardPerPlayersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} PlayerHandOffset
 */
Serialization.PlayerSandbox.addPlayerHand = function(builder, PlayerHandOffset) {
  builder.addFieldOffset(11, PlayerHandOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
Serialization.PlayerSandbox.createPlayerHandVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Serialization.PlayerSandbox.startPlayerHandVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Serialization.PlayerSandbox.endPlayerSandbox = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Serialization.PlayerSandbox.finishPlayerSandboxBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Serialization.PlayerSandbox.finishSizePrefixedPlayerSandboxBuffer = function(builder, offset) {
  builder.finish(offset, undefined, true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} PlayerIndex
 * @param {number} NumberOfPlayers
 * @param {number} MaxHandSize
 * @param {number} CurrentTurn
 * @param {NS15764831323439663495.Serialization.State} CurrentState
 * @param {number} CurrentPlayer
 * @param {flatbuffers.Offset} TrumpCardOffset
 * @param {number} FirstFoldPlayer
 * @param {flatbuffers.Offset} PlacedBetsOffset
 * @param {flatbuffers.Offset} PlayedCardsOffset
 * @param {flatbuffers.Offset} NumberOfCardPerPlayersOffset
 * @param {flatbuffers.Offset} PlayerHandOffset
 * @returns {flatbuffers.Offset}
 */
Serialization.PlayerSandbox.createPlayerSandbox = function(builder, PlayerIndex, NumberOfPlayers, MaxHandSize, CurrentTurn, CurrentState, CurrentPlayer, TrumpCardOffset, FirstFoldPlayer, PlacedBetsOffset, PlayedCardsOffset, NumberOfCardPerPlayersOffset, PlayerHandOffset) {
  Serialization.PlayerSandbox.startPlayerSandbox(builder);
  Serialization.PlayerSandbox.addPlayerIndex(builder, PlayerIndex);
  Serialization.PlayerSandbox.addNumberOfPlayers(builder, NumberOfPlayers);
  Serialization.PlayerSandbox.addMaxHandSize(builder, MaxHandSize);
  Serialization.PlayerSandbox.addCurrentTurn(builder, CurrentTurn);
  Serialization.PlayerSandbox.addCurrentState(builder, CurrentState);
  Serialization.PlayerSandbox.addCurrentPlayer(builder, CurrentPlayer);
  Serialization.PlayerSandbox.addTrumpCard(builder, TrumpCardOffset);
  Serialization.PlayerSandbox.addFirstFoldPlayer(builder, FirstFoldPlayer);
  Serialization.PlayerSandbox.addPlacedBets(builder, PlacedBetsOffset);
  Serialization.PlayerSandbox.addPlayedCards(builder, PlayedCardsOffset);
  Serialization.PlayerSandbox.addNumberOfCardPerPlayers(builder, NumberOfCardPerPlayersOffset);
  Serialization.PlayerSandbox.addPlayerHand(builder, PlayerHandOffset);
  return Serialization.PlayerSandbox.endPlayerSandbox(builder);
}

// Exports for Node.js and RequireJS
this.Serialization = Serialization;
